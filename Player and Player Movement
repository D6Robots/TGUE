// Player_move.cpp : Defines the entry point for the console application.
//

#include "stdafx.h" //visual studio
#include <iostream>
#include <conio.h>
#include <string>
#include <stdio.h>
#include <windows.h>
using namespace std;



/* conio.h is the library that I implemented to use the KBhit function    */

/*class map
{
public:
	void importMap(string fileName)
	{
		fstream mapData(fileName);
		string line;
		array<char, 82> lineArray;
		while (getline(mapData, line))
		{
			for (int i = 0; i <str.length(); i++)
			{
				lineArray[i] = line[i];
			}
			cout << lineArray;
		}
	}
	void drawMap()
	{

	}
};*/      //pull the map from davids code but was unsucessful
bool gameOver = false; 
int x;
int y;
int itemX, itemY;
int score;
const int width = 30;
const int height = 30;
enum eDirecton { STOP = 0, LEFT, RIGHT, UP, DOWN };
eDirecton dir;
// container ed , declare dir 

void Setup()
{
	gameOver = false;
	dir = STOP;
    x = width / 2; //player x position (in the middle) 
	y = height / 2; //player y position (in the middle)-- so player's starting point is in the middle of the map
    itemX = rand() % width;
	itemY = rand() % height;
	score = 0;
}
void Draw()
{
	system("cls"); //system("clear");
	for (int i = 0; i < width +2; i++)
		cout << "#";
	cout << endl;
	for (int k = 0; k < height; k++)
	{
		for (int j = 0; j < width; j++)
		{
			if (j == 0)
				cout << "#";
			if (k == y && j == x)
				cout << "O";
			else if (k == itemY && j == itemX)
				cout << "F";
			     else
					
			cout << " ";
			if (j == width - 1)
				cout << "#";
		}
		cout << endl;
	}

	for (int i = 0; i < width + 2; i++)
		cout << "#";
	cout << endl;
	cout << "Score:" << score << endl;
}
void Input()
{
	if (_kbhit())
	{
	switch (_getch())
	{
	case 'a':
		dir = LEFT;


		break;
	case 'd':
		dir = RIGHT;
		break;
	case 'w':
		dir = UP;
		break;
	case 's':
		dir = DOWN;
		break;
	case 'x':
		gameOver = true;
		break;
		  }
	}
} 
void Logic()
{

	switch (dir)
	{
	case LEFT:
		x--;
		dir = STOP;
		Draw();
		break;
	case RIGHT:
		x++;
		dir = STOP;
		Draw();
		break;
	case UP:
		y--;
		dir = STOP;
		Draw();
		break;
	case DOWN:
		y++;
		dir = STOP;
		Draw();
		break;
	default:
		break;

	
	}
	if (x > width || x < 0 || y > height || y < 0)       
		gameOver = true;
	if (x >= width) x = 0; else if (x < 0) x = width - 1;
	if (y >= height) y = 0; else if (y < 0) y = height - 1;
}

int main()
{
		/*map myMap;
		string fileName = "level1.txt";
		myMap.importMap(fileName);*/

		Setup();
		Draw();
		while (!gameOver)
		{
			
			Input();
			Logic();
			Sleep(100);
		}
}

//while loop till its gameover = true
void insertion(std::string sqliteFile)
{
	try
	{
		sqlite::sqlite db(sqliteFile);
		auto cur = db.get_statement();
		cur->step();
		cur->set_sql("INSERT INTO Player (Name, Armour, Health, Damage, Current score) values ('Student', '100', '100', '10',?);" (score));
		cur->prepare();
		cur->step();

	}
	catch (sqlite::exception e)      // catch all sql issues
	{
		std::cerr << e.what() << std::endl;
	}




}
